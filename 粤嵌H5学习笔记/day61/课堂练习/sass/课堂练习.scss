// ------------------------------ 总结
// 0. 行注释不会被编译，块级注释会被编译（补充：原生 css 的注释出现在不恰当位置时（如属性名\值处），也不会被编译出来）
// 1. 尽管变量自身提供了很多有用的地方，但是 sass 基于变量提供的更为强大的工具才是重点。只有当变量与 less/sass 的其他特性一起使用时，才能发挥其全部的潜能。
// ------------------------------ 全局变量
// 1. 颜色
// 1.0 网页配色
$body-bg-color: black;
// 1.1 主题色
$base-bg-color1: #0065b3;
$base-bg-color2: #ffe9a4;
$base-bg-color3: #4abec5;
$base-bg-color4: #e5a770;
$base-bg-color5: #e9b3c5;
$base-bg-color6: lightcyan;
// 1.2 字体颜色
$base-color1: rgb(71, 71, 71);
$base-color2: rgb(104, 104, 104);
$base-color3: rgb(162, 162, 162);
$base-color4: rgb(199, 199, 199);
$base-color5: rgb(228, 228, 228);
// 2. 尺寸
// 2.1 宽高
// 2.2 边距
// 2.2.1 外边距
// 2.2.2 内边距
// 2.3 边框
// 2.4 阴影
// ------------------------------ 混入（mixin）
// 1. 混入纯属性
@mixin center-p {
    /* 通过 position 配合 transform （水平/垂直）居中 */
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    // transform: translateX(-50%);
    // transform: translateY(-50%);
}

// 2. 混入样式（即：一切 css 规则）
@mixin a-no-text-decoration {
    & a {
        /* 清除 a 标签默认下划线 */
        text-decoration: none;
    }
}

// ------------------------------ 流程控制
// 1. 布尔运算: 允许(在符合语法的位置)使用 and,or,not 关键字
// 2. @if-@else
@mixin test1($bool) {
    // 总结:
    //  1. 字面量 true/false 是布尔关键字
    //  2. 所有字符串等价于 true
    //  3. 所有被 css 编译成数值的属性值(以下简称数值属性),均被处理为字符串(注意,颜色 red 在 css 中被编译成数值,其是数值属性,而字宽 large,对齐方式 auto 等在 css 外被最终编译成数值的属性值,不是数值属性)
    //  5, 所有包含数值属性的字面量,均等价于 true
    //  4. 所有非法符号均等价于 true,但编译后会保留字面量(编译前用其进行运算还会产生不可预知的结果)
    //  5. 所有 css 属性名和非数值属性值被处理为非法符号
    @if $bool {
        result: $bool +' is true';
    }
    @else {
        result: $bool +' is false';
    }
}

@mixin test2() {
    @if 1 {
        result1: 'can use single if';
    }
    @if 1>0 {
        result2: 'can use bool operator';
    }
    @if 1 and 1 {
        result3: 'can use identifier and';
    }
    @if 1 or false {
        result4: 'can use identifier or';
    }
    @if not false {
        result5: 'can use identifier not';
    }
    @if 1 or false and not false {
        // 总结:
        //  1. 布尔标识符左结合
        //  2. 不清楚 or 和 and 没有优先级之分
        //  3. not 优先级高于 and/or
        result6: 'can use multy identifiers';
    }
    $t: 'have';
    @if false or 1 and false {
        result7: 'or&and '+$t+' the same priority';
    }
}

#process-control {
    #test1 {
        @include test1(1px solid);
    }
    #test2 {
        @include test2();
    }
}

// @if 1 {}
// @else {
//     width: 3px;
//     @if 3>2 {
//         // 相当于 else-if 了
//         height: 4px;
//     }
// }
// 3. 传参混入
@mixin before($content) {
    &::before {
        content: $content;
    }
}

// ------------------------------ 样式
// 1. 使用变量
body {
    width: 1200px;
    margin: 0 auto;
    background-color: $body-bg-color;
}

header {
    background-color: $base-bg-color4;
}

footer {
    background-color: $base-bg-color1;
    color: white;
}

// 2.选择器嵌套语法，简化后代选择器的书写
// 2.1 纯嵌套
main {
    background-color: $base-bg-color3;
    nav {
        background-color: $base-bg-color2;
    }
    aside {
        width: 26%;
        float: right;
        background-color: $base-bg-color5;
    }
    article {
        width: 70%;
        float: left;
        background-color: $base-bg-color5;
        section {
            background-color: $base-bg-color6;
        }
    }
}

// 2.2 配合群组选择器。需注意编译出的 css 代码量
header,
main,
footer,
nav,
aside,
article,
section {
    min-height: 50px;
    margin: 10px 0;
    padding: 5px;
    border-radius: 5px;
    text-align: center;
    overflow: hidden;
}

// 2.3 配合父类选择器&。实质是 sass 内置变量，如同 this 指针=》勘误，并不是 this，仅做了简单的嵌套选择器的字符拼接，导致添加祖先选择器会不那么灵活了 
main {
    a {
        color: blue;
        // 伪类使用 &-父选择器
        &:hover {
            color: red;
        }
        // 而不是选择器嵌套语法默认的后代选择器
         :hover {
            color: green;
        }
        // 使用父类选择器，添加祖辈选择器（失败）
        // section#section2 &:hover{ // 没有这么灵活
        //     color: yellow;
        // }
    }
    // 使用父类选择器，添加祖辈选择器
    section {
        &#section2 a:hover {
            color: yellow;
        }
    }
    &::before {
        content: '★';
    }
}

// 2.4 此外，选择器嵌套语法还支持的 css 选择器有：后代选择器‘ ’、子选择器‘>’、毗邻选择器‘+’、同层选择器‘~’，不再一一列举
h4 {
    ~span {
        color: red;
    }
}

// 3. 属性嵌套语法，简化属性的书写
aside {
    border: {
        width: 2px;
        style: solid;
        color: gray;
    }
}

article {
    border: 2px dotted red {
        top: 0;
        bottom: 0;
    }
}

// 4. @import 导入局部样式
// 4.1 全局导入
@import "zebra-table"; // 引入局部样式可省略其前缀下划线‘_’，也不必写后缀名“.scss”/“.sass”

/* 调整对齐方式 */

#diffrent-between-less-and-sass tbody tr td {
    &:nth-child(2) {
        text-align: center;
    }
}

// 4.2 默认变量标签 !default，即：允许导入样式文件自身的外部变量，在与被导入的样式文件中的内部变量同名时，可拥有更高优先级（默认内部变量在自己的作用域会覆盖外部同名变量）
$same-color: gold;
$same-text-shadow:-2px 0 0 blue;
@import "default-value";
aside {
    color: $same-color;
    text-shadow: $same-text-shadow;
}

// 4.3 嵌套导入，即：可在任意样式块内导入局部样式，导入的局部样式仅在该样式块内生效
header {
    h1 {
        @import "colorful-font";
    }
}

// 4.4 导入原生 css 文件
// 4.4.1 想以原生方式导入（会被浏览器加载，而不是预编译），只需满足以下三种条件之一
//  被导入文件的名字以 .css 结尾；
//  被导入文件的名字是一个 URL 地址（比如http://www.sass.hk/css/css.css），由此可用谷歌字体 API 提供的相应服务；
//  被导入文件的名字是 CSS 的 url()值。
// 4.4.2 想直接在 sass 里导入并预编译：只需将 css 文件后缀改为 sass/scss
// 5. 使用混入
#section5 {
    >div {
        width: 100%;
        margin: 2px;
        background-color: purple;
        &:nth-of-type(1) {
            height: 200px;
            position: relative;
            .center-item {
                width: 50%;
                height: 50%;
                background-color: orange;
                @include center-p(); // 混入纯属性
            }
        }
        &:nth-of-type(2) {
            @include a-no-text-decoration(); // 混入样式
            @include before('传参');
        }
    }
}